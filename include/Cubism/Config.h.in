// File       : Config.h
// Created    : Tue Mar 23 2021 01:46:12 PM (+0100)
// Author     : Fabian Wermelinger
// Description: CubismNova configuration
// Copyright 2021 ETH Zurich. All Rights Reserved.
#ifndef CONFIG_H_LGK2OZTC
#define CONFIG_H_LGK2OZTC

// https://www.fluentcpp.com/2019/08/30/how-to-disable-a-warning-in-cpp/
#if defined(_MSC_VER)
#define DISABLE_WARNING_PUSH __pragma(warning(push))
#define DISABLE_WARNING_POP __pragma(warning(pop))
#define DISABLE_WARNING(warningNumber)                                         \
    __pragma(warning(disable : warningNumber))

#define DISABLE_WARNING_UNREFERENCED_FORMAL_PARAMETER DISABLE_WARNING(4100)
#define DISABLE_WARNING_UNREFERENCED_FORMAL_VARIABLE DISABLE_WARNING(4101)
#define DISABLE_WARNING_UNREFERENCED_FUNCTION DISABLE_WARNING(4505)

#elif defined(__GNUC__) || defined(__clang__)
#define DO_PRAGMA(X) _Pragma(#X)
#define DISABLE_WARNING_PUSH DO_PRAGMA(GCC diagnostic push)
#define DISABLE_WARNING_POP DO_PRAGMA(GCC diagnostic pop)
#define DISABLE_WARNING(warningName)                                           \
    DO_PRAGMA(GCC diagnostic ignored #warningName)

#define DISABLE_WARNING_UNREFERENCED_FORMAL_PARAMETER                          \
    DISABLE_WARNING(-Wunused-parameter)
#define DISABLE_WARNING_UNREFERENCED_FORMAL_VARIABLE                           \
    DISABLE_WARNING(-Wunused-variable)
#define DISABLE_WARNING_UNREFERENCED_FUNCTION                                  \
    DISABLE_WARNING(-Wunused-function)

#else
#define DISABLE_WARNING_PUSH
#define DISABLE_WARNING_POP
#define DISABLE_WARNING_UNREFERENCED_FORMAL_PARAMETER
#define DISABLE_WARNING_UNREFERENCED_FUNCTION
#endif

// skip C++ related OpenMPI code
// FIXME: [fabianw@mavt.ethz.ch; 2021-03-15] H5public.h does not guard against
// OMPI_SKIP_MPICXX if already defined
// #ifndef OMPI_SKIP_MPICXX
// #define OMPI_SKIP_MPICXX
// #endif /* OMPI_SKIP_MPICXX */

// Use of 32-bit signed integer for indexing.
#mesondefine CUBISM_32BIT_INDEX

// Use HDF5 for I/O file operations (requires -DCUBISM_IO=true).
#mesondefine CUBISM_USE_HDF

// Default dimension.  This is the assumed dimension when nothing else is
// specified at template type instantiation.  The compiled libraries do not
// depend on this setting, they provide explicit instantiations for the most
// common built-in types in 2 and 3 dimensions.
#define CUBISM_DIMENSION 3

// Default byte-boundary alignment of allocated memory.
#define CUBISM_ALIGNMENT 32

#if !defined(NAMESPACE_BEGIN)
#define NAMESPACE_BEGIN(name)                                                  \
    namespace name                                                             \
    {
#endif

#if !defined(NAMESPACE_END)
#define NAMESPACE_END(name) }
#endif

static_assert(CUBISM_DIMENSION > 0, "CUBISM_DIMENSION must be > 0");

#endif /* CONFIG_H_LGK2OZTC */
